import time, pytz
from aiogram import Router, Bot, types
from aiogram.types import Message, CallbackQuery
from aiogram.dispatcher.middlewares.base import BaseMiddleware
from collections import defaultdict
from random import shuffle
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from config import TOKEN
from datetime import datetime, timedelta
from db.database import Database as db
import random 


# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–Ω—Ç–∏—Å–ø–∞–º–∞
MESSAGE_LIMIT = 40  # –õ–∏–º–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞ –º–∏–Ω—É—Ç—É
TIME_WINDOW = 60  # –í—Ä–µ–º—è –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö)
COOLDOWN_TIMES = [60, 120, 180, 1000, 10000]  # –í—Ä–µ–º—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö)

# –•—Ä–∞–Ω–∏–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
user_last_message_time = defaultdict(lambda: datetime(1970, 1, 1, tzinfo=pytz.UTC))
user_requests = defaultdict(list)
user_blocked_until = defaultdict(lambda: datetime(1970, 1, 1, tzinfo=pytz.UTC))  # –í—Ä–µ–º—è, –¥–æ –∫–æ—Ç–æ—Ä–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω
user_violations = defaultdict(int)  # –°—á–µ—Ç—á–∏–∫ –Ω–∞—Ä—É—à–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
user_answers = defaultdict(lambda: None)
user_warning_count = defaultdict(int)  # –°—á–µ—Ç—á–∏–∫ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ —Ä–æ—É—Ç–µ—Ä–∞
bot = Bot(token=TOKEN)
spam_router = Router()
from aiogram import Router, Bot, types
from aiogram.types import Message, CallbackQuery
from aiogram.dispatcher.middlewares.base import BaseMiddleware
from collections import defaultdict
from random import shuffle
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from config import TOKEN
from datetime import datetime, timedelta
import pytz
import random

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–Ω—Ç–∏—Å–ø–∞–º–∞
MESSAGE_LIMIT = 40  # –õ–∏–º–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞ –º–∏–Ω—É—Ç—É
TIME_WINDOW = 60  # –í—Ä–µ–º—è –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö)
WARNING_THRESHOLD = 10  # –ü–æ—Ä–æ–≥ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π –¥–æ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
COOLDOWN_TIMES = [60, 120, 180, 1000, 10000]  # –í—Ä–µ–º—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö)

# –•—Ä–∞–Ω–∏–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
user_last_message_time = defaultdict(lambda: datetime(1970, 1, 1, tzinfo=pytz.UTC))
user_requests = defaultdict(list)
user_blocked_until = defaultdict(lambda: datetime(1970, 1, 1, tzinfo=pytz.UTC))  # –í—Ä–µ–º—è, –¥–æ –∫–æ—Ç–æ—Ä–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω
user_violations = defaultdict(int)  # –°—á–µ—Ç—á–∏–∫ –Ω–∞—Ä—É—à–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
user_answers = defaultdict(lambda: None)
user_warning_count = defaultdict(int)  # –°—á–µ—Ç—á–∏–∫ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ —Ä–æ—É—Ç–µ—Ä–∞
bot = Bot(token=TOKEN)
spam_router = Router()

class AntiSpamMiddleware(BaseMiddleware):
    async def __call__(self, handler, event: types.Message, data: dict):
        user_id = event.from_user.id
        current_time = datetime.now(pytz.UTC)
        
        # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –º–µ—Ç–∫–∏ –≤—Ä–µ–º–µ–Ω–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ UTC –≤—Ä–µ–º—è
        block_time = user_blocked_until.get(user_id, datetime(1970, 1, 1, tzinfo=pytz.UTC))
        unchained_time = block_time
        
        if current_time < unchained_time:
            # –í—ã—á–∏—Å–ª—è–µ–º –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è
            time_left = unchained_time - current_time
            days, remainder = divmod(time_left.seconds, 86400)
            hours, remainder = divmod(remainder, 3600)
            minutes, seconds = divmod(remainder, 60)

            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è
            time_left_formatted = f"{days} days {hours:02}:{minutes:02}:{seconds:02}"

            await event.answer(f"<b>Damn, you texted too fast, let's cool down :D\n\nYou will be unblocked in {time_left_formatted}</b>", parse_mode="HTML")
            return

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —á–∞—Å—Ç–æ—Ç—ã —Å–æ–æ–±—â–µ–Ω–∏–π
        last_message_time = user_last_message_time.get(user_id, datetime(1970, 1, 1, tzinfo=pytz.UTC))
        if current_time - last_message_time < timedelta(seconds=1):
            # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á—ë—Ç—á–∏–∫ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π
            user_warning_count[user_id] += 1

            if user_warning_count[user_id] >= WARNING_THRESHOLD:
                # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –Ω–∞—Ä—É—à–µ–Ω–∏–π
                user_violations[user_id] += 1

                # –í—ã–±–∏—Ä–∞–µ–º –≤—Ä–µ–º—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –Ω–∞—Ä—É—à–µ–Ω–∏–π
                violation_count = user_violations[user_id]
                cooldown_time = COOLDOWN_TIMES[min(violation_count - 1, len(COOLDOWN_TIMES) - 1)]

                # –ë–ª–æ–∫–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —ç—Ç–æ –≤—Ä–µ–º—è
                user_blocked_until[user_id] = current_time + timedelta(seconds=cooldown_time)

                # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–æ–ø—Ä–æ—Å–∞ –∏ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–∞
                frst_number = random.randrange(0, 9)
                scnd_number = random.randrange(0, 9)
                sights = ["+", "-"]
                sight_random = sights[random.randrange(0, 1)]

                question = str(frst_number) + str(sight_random) + str(scnd_number)

                if sight_random == "+":
                    correct_answer = frst_number + scnd_number
                else: 
                    correct_answer = frst_number - scnd_number

                wrong_1 = correct_answer + 2
                wrong_2 = correct_answer + 1
                wrong_3 = correct_answer - 1
                wrong_answers = [wrong_1, wrong_2, wrong_3]  # –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã
                options = [correct_answer] + wrong_answers
                shuffle(options)

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
                user_answers[user_id] = correct_answer

                # –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–æ–≤
                buttons = [InlineKeyboardButton(text=str(option), callback_data=f"answer:{option}") for option in options]
                keyboard = InlineKeyboardMarkup(inline_keyboard=[buttons])

                await event.answer(f"<b>You have one of the fastest hands here. Are you not a bot? Answer this: {question}</b>", reply_markup=keyboard, parse_mode="HTML")
                return
            else:
                await event.answer("<b>üö´ Please, don't spam.</b>", parse_mode="HTML")
                return

        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á—ë—Ç—á–∏–∫ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π –ø—Ä–∏ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
        user_warning_count[user_id] = 0

        # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        user_last_message_time[user_id] = current_time

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ –∑–∞ –º–∏–Ω—É—Ç—É
        user_requests[user_id].append(current_time)
        user_requests[user_id] = [t for t in user_requests[user_id] if current_time - t < timedelta(seconds=TIME_WINDOW)]

        if len(user_requests[user_id]) > MESSAGE_LIMIT:
            # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á—ë—Ç—á–∏–∫ –Ω–∞—Ä—É—à–µ–Ω–∏–π
            user_violations[user_id] += 1

            # –í—ã–±–∏—Ä–∞–µ–º –≤—Ä–µ–º—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –Ω–∞—Ä—É—à–µ–Ω–∏–π
            violation_count = user_violations[user_id]
            cooldown_time = COOLDOWN_TIMES[min(violation_count - 1, len(COOLDOWN_TIMES) - 1)]

            # –ë–ª–æ–∫–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —ç—Ç–æ –≤—Ä–µ–º—è
            user_blocked_until[user_id] = current_time + timedelta(seconds=cooldown_time)

            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–æ–ø—Ä–æ—Å–∞ –∏ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–∞
            frst_number = random.randrange(0, 9)
            scnd_number = random.randrange(0, 9)
            sights = ["+", "-"]
            sight_random = sights[random.randrange(0, 1)]

            question = str(frst_number) + str(sight_random) + str(scnd_number)

            if sight_random == "+":
                correct_answer = frst_number + scnd_number
            else: 
                correct_answer = frst_number - scnd_number

            wrong_1 = correct_answer + 2
            wrong_2 = correct_answer + 1
            wrong_3 = correct_answer - 1
            wrong_answers = [wrong_1, wrong_2, wrong_3]  # –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã
            options = [correct_answer] + wrong_answers
            shuffle(options)

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
            user_answers[user_id] = correct_answer

            # –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–æ–≤
            buttons = [InlineKeyboardButton(text=str(option), callback_data=f"answer:{option}") for option in options]
            keyboard = InlineKeyboardMarkup(inline_keyboard=[buttons])

            await event.answer(f"<b>You have one of the fastest hands here. Are you not a bot? Answer this: {question}</b>", reply_markup=keyboard, parse_mode="HTML")
            return

        # –ü–µ—Ä–µ–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–∞–ª—å—à–µ –ø–æ —Ü–µ–ø–æ—á–∫–µ
        return await handler(event, data)



# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏
@spam_router.callback_query(lambda c: c.data and c.data.startswith('answer:'))
async def handle_answer(callback_query: CallbackQuery):
    user_id = callback_query.from_user.id
    selected_answer = int(callback_query.data.split(':')[1])
    correct_answer = user_answers.get(user_id)

    if selected_answer == correct_answer:
        await bot.send_message(user_id, "<b>Damn, it was good! Your hand is really fast!</b>", parse_mode="HTML")
        user_requests[user_id] = []  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–æ–≤
        user_violations[user_id] = 0  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –Ω–∞—Ä—É—à–µ–Ω–∏–π
    else:
        await callback_query.message.reply("<b>Damn... You are the bot as me... Brother?</b>", parse_mode="HTML")
    
    # –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –æ—Ç–≤–µ—Ç–∞
    await callback_query.message.edit_reply_markup(reply_markup=None)
